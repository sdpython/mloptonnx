jobs:
- job: 'TestLinux'
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python310-Linux:
        python.version: '3.10'
    maxParallel: 3
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: sudo apt-get update
    displayName: 'AptGet Update'
  - script: python -m pip install --upgrade pip setuptools wheel
    displayName: 'Install tools'
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: python -c "import platform;print(platform.version())"
    displayName: 'Platform'
  - script: |
      python -u setup.py build_ext --inplace
    displayName: 'Build inplace'
  - script: |
      python -u setup.py unittests
    displayName: 'Runs Unit Tests'
  - script: |
      python -m pip install cibuildwheel
      export CIBW_MANYLINUX_X86_64_IMAGE="manylinux_2_24"
      export CIBW_BEFORE_BUILD="pip install cython numpy scipy pyquickhelper onnx && python setup.py build_ext --inplace"
      export CIBW_BUILD="cp310-manylinux_x86_64"
      python -m cibuildwheel --output-dir dist/wheelhouse310 --platform linux
    displayName: 'Build Package manylinux_x_y_py310'
  - script: |
      export CIBW_MANYLINUX_X86_64_IMAGE="manylinux2014"
      export CIBW_BEFORE_BUILD="pip install cython numpy scipy pyquickhelper onnx && python setup.py build_ext --inplace"
      export CIBW_BUILD="cp38-manylinux_x86_64 cp39-manylinux_x86_64"
      python -m cibuildwheel --output-dir dist/wheelhouse --platform linux
    displayName: 'Build Package manylinux2014'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-linux'
      targetPath: 'dist'

- job: 'TestWindows'
  pool:
    vmImage: 'windows-latest'
  strategy:
    matrix:
      Python310-Windows:
        python.version: '3.10'
    maxParallel: 3
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: python -m pip install --upgrade pip setuptools wheel pytest
    displayName: 'Install tools'
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: python -c "import platform;print(platform.version())"
    displayName: 'Platform'
  - script: python -u setup.py build_ext --inplace
    displayName: 'Build inplace'
  - script: python setup.py install
    displayName: 'install the package'
#   - script: python setup.py unittests
#     displayName: 'Runs Unit Tests'
#   - script: |
#       python -m pip install cibuildwheel
#       set CIBW_BEFORE_BUILD=pip install cython numpy scipy pyquickhelper onnx & python setup.py build_ext --inplace
#       set CIBW_BUILD=cp38-win_amd64 cp39-win_amd64 cp310-win_amd64
#       python -m cibuildwheel --output-dir dist/wheelhouse
#     displayName: 'Build Package many'
#   - task: PublishPipelineArtifact@0
#     inputs:
#       artifactName: 'wheel-windows'
#       targetPath: 'dist'

- job: 'TestMac'
  pool:
    vmImage: 'macOS-latest'
  strategy:
    matrix:
      Python310-MacOs:
        python.version: '3.10'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: gcc --version
    displayName: 'gcc version'
  - script: brew update
    displayName: 'brew update'
  - script: export
    displayName: 'export'
  - script: gcc --version
    displayName: 'gcc version'
  - script: brew install llvm
    continueOnError: true
    displayName: 'install llvm'
  - script: brew install libomp
    displayName: 'Install omp'
  - script: brew upgrade p7zip
    continueOnError: true
    displayName: 'Install p7zip'
  - script: brew install cairo pango gdk-pixbuf libffi
    displayName: 'Install cairo pango gdk-pixbuf libffi'
  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH.
  - bash: sudo chown -R $USER $CONDA
    displayName: Take ownership of conda installation
  - bash: conda install -y -c conda-forge numpy scipy
    displayName: Install numpy scipy
  - bash: conda install -y -c conda-forge llvmlite numba
    displayName: Install llvmlite numba
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: |
         python setup.py build_ext --inplace
    displayName: 'Build package inplace'
  - script: python -u setup.py unittests
    displayName: 'Runs Unit Tests'
  - script: |
      python -m pip install cibuildwheel
      export CIBW_BEFORE_BUILD="pip install cython numpy scipy pyquickhelper pyquicksetup onnx && python setup.py build_ext --inplace"
      export CIBW_BUILD="cp39-macosx_x86_64 cp310-macosx_x86_64"
      export CC=gcc
      export CXX=g++
      python -m cibuildwheel --output-dir dist/wheelhouse
    continueOnError: true
    displayName: 'Build Package many'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-mac'
      targetPath: 'dist'
